//--------------------------------------------------------------------------------------------------------
// fpga_top
// Type    : synthesizable, FPGA's top
// Standard: Verilog 2001 (IEEE1364-2001)
// Function: FOC usage example, FPGA top module for controlling motor torque direction, monitoring current loop control curve via UART.
// Parameters: None
// Input/Output: See comments below
//--------------------------------------------------------------------------------------------------------

module fpga_top (
    input  wire clk_50m,
    output wire pwm_en,
    output wire pwm_a,
    output wire pwm_b,
    output wire pwm_c,
   
    output wire spi_ss,
    output wire spi_sck,
    output wire spi_mosi,
    input  wire spi_miso,
   
    output wire i2c_scl,
    inout       i2c_sda,
    
    output wire uart_tx
);

wire               rstn;       
wire               clk;        

wire        [11:0] phi;       

wire               sn_adc;     
wire               en_adc;      
wire        [11:0] adc_value_a; 
wire        [11:0] adc_value_b; 
wire        [11:0] adc_value_c;

wire               en_idq;      
wire signed [15:0] id;         
wire signed [15:0] iq;          
wire signed [15:0] id_aim;     
reg  signed [15:0] iq_aim;      



// PLL, generates a 36.864 MHz clock (clk) from a 50 MHz clock (clk_50m).
// Note: This module is specific to Altera Cyclone IV FPGA. For other vendors or FPGA series, use their respective IP cores/primitives (e.g., Xilinx's clock wizard).
wire [3:0] subwire0;
altpll u_altpll ( .inclk ( {1'b0, clk_50m} ), .clk ( {subwire0, clk} ), .locked ( rstn ),  .activeclock (),  .areset (1'b0), .clkbad (),  .clkena ({6{1'b1}}),  .clkloss (), .clkswitch (1'b0), .configupdate (1'b0), .enable0 (), .enable1 (),  .extclk (),  .extclkena ({4{1'b1}}), .fbin (1'b1), .fbmimicbidir (),  .fbout (), .fref (), .icdrclk (), .pfdena (1'b1), .phasecounterselect ({4{1'b1}}), .phasedone (), .phasestep (1'b1), .phaseupdown (1'b1),  .pllena (1'b1), .scanaclr (1'b0), .scanclk (1'b0), .scanclkena (1'b1), .scandata (1'b0), .scandataout (),  .scandone (), .scanread (1'b0), .scanwrite (1'b0), .sclkout0 (), .sclkout1 (), .vcooverrange (), .vcounderrange ());
defparam u_altpll.bandwidth_type = "AUTO", u_altpll.clk0_divide_by = 99,  u_altpll.clk0_duty_cycle = 50, u_altpll.clk0_multiply_by = 73, u_altpll.clk0_phase_shift = "0", u_altpll.compensate_clock = "CLK0", u_altpll.inclk0_input_frequency = 20000, u_altpll.intended_device_family = "Cyclone IV E",  u_altpll.lpm_hint = "CBX_MODULE_PREFIX=pll", u_altpll.lpm_type = "altpll",  u_altpll.operation_mode = "NORMAL",  u_altpll.pll_type = "AUTO", u_altpll.port_activeclock = "PORT_UNUSED",  u_altpll.port_areset = "PORT_UNUSED",  u_altpll.port_clkbad0 = "PORT_UNUSED",  u_altpll.port_clkbad1 = "PORT_UNUSED", u_altpll.port_clkloss = "PORT_UNUSED", u_altpll.port_clkswitch = "PORT_UNUSED", u_altpll.port_configupdate = "PORT_UNUSED", u_altpll.port_fbin = "PORT_UNUSED", u_altpll.port_inclk0 = "PORT_USED",  u_altpll.port_inclk1 = "PORT_UNUSED", u_altpll.port_locked = "PORT_USED", u_altpll.port_pfdena = "PORT_UNUSED",  u_altpll.port_phasecounterselect = "PORT_UNUSED", u_altpll.port_phasedone = "PORT_UNUSED", u_altpll.port_phasestep = "PORT_UNUSED", u_altpll.port_phaseupdown = "PORT_UNUSED",  u_altpll.port_pllena = "PORT_UNUSED", u_altpll.port_scanaclr = "PORT_UNUSED",  u_altpll.port_scanclk = "PORT_UNUSED", u_altpll.port_scanclkena = "PORT_UNUSED", u_altpll.port_scandata = "PORT_UNUSED", u_altpll.port_scandataout = "PORT_UNUSED", u_altpll.port_scandone = "PORT_UNUSED", u_altpll.port_scanread = "PORT_UNUSED", u_altpll.port_scanwrite = "PORT_UNUSED", u_altpll.port_clk0 = "PORT_USED", u_altpll.port_clk1 = "PORT_UNUSED", u_altpll.port_clk2 = "PORT_UNUSED",  u_altpll.port_clk3 = "PORT_UNUSED", u_altpll.port_clk4 = "PORT_UNUSED", u_altpll.port_clk5 = "PORT_UNUSED", u_altpll.port_clkena0 = "PORT_UNUSED",  u_altpll.port_clkena1 = "PORT_UNUSED", u_altpll.port_clkena2 = "PORT_UNUSED", u_altpll.port_clkena3 = "PORT_UNUSED",  u_altpll.port_clkena4 = "PORT_UNUSED", u_altpll.port_clkena5 = "PORT_UNUSED", u_altpll.port_extclk0 = "PORT_UNUSED", u_altpll.port_extclk1 = "PORT_UNUSED",  u_altpll.port_extclk2 = "PORT_UNUSED",  u_altpll.port_extclk3 = "PORT_UNUSED",  u_altpll.self_reset_on_loss_lock = "OFF",  u_altpll.width_clock = 5;
//assign rstn=1'b1; assign clk=clk_50m;


// Simple I2C controller for AS5600 magnetic encoder reading, reads the current rotor mechanical angle Ï†.
wire [3:0] i2c_trash;    // Discarded upper 4 bits
i2c_register_read #(
    .CLK_DIV      ( 16'd10         ),
    .SLAVE_ADDR   ( 7'h36          ),
    .REGISTER_ADDR( 8'h0E          )
) u_as5600_read (
    .rstn         ( rstn           ),
    .clk          ( clk            ),
    .scl          ( i2c_scl        ),
    .sda          ( i2c_sda        ),
    .start        ( 1'b1           ),
    .ready        (                ),
    .done         (                ),
    .regout       ( {i2c_trash, phi} )
);



// AD7928 ADC reader for reading 3-phase current sample values (raw ADC values).
adc_ad7928 #(
    .CH_CNT       ( 3'd2           ),
    .CH0          ( 3'd1           ),
    .CH1          ( 3'd2           ),
    .CH2          ( 3'd3           )
) u_adc_ad7928 (
    .rstn         ( rstn           ),
    .clk          ( clk            ),
    .spi_ss       ( spi_ss         ),
    .spi_sck      ( spi_sck        ),
    .spi_mosi     ( spi_mosi       ),
    .spi_miso     ( spi_miso       ),
    .i_sn_adc     ( sn_adc         ),
    .o_en_adc     ( en_adc         ),
    .o_adc_value0 ( adc_value_a    ),
    .o_adc_value1 ( adc_value_b    ),
    .o_adc_value2 ( adc_value_c    ),
    .o_adc_value3 (                ),
    .o_adc_value4 (                ),
    .o_adc_value5 (                ),
    .o_adc_value6 (                ),
    .o_adc_value7 (                )
);



// FOC + SVPWM module (see foc_top.sv for usage and principles)
foc_top #(
    .INIT_CYCLES  ( 16777216       ),
    .ANGLE_INV    ( 1'b0           ),
    .POLE_PAIR    ( 8'd7           ),
    .MAX_AMP      ( 9'd384         ),
    .SAMPLE_DELAY ( 9'd120         )
) u_foc_top (
    .rstn         ( rstn           ),
    .clk          ( clk            ),
    .Kp           ( 31'd300000     ),
    .Ki           ( 31'd30000      ),
    .phi          ( phi            ),
    .sn_adc       ( sn_adc         ),
    .en_adc       ( en_adc         ),
    .adc_a        ( adc_value_a    ),
    .adc_b        ( adc_value_b    ),
    .adc_c        ( adc_value_c    ),
    .pwm_en       ( pwm_en         ),
    .pwm_a        ( pwm_a          ),
    .pwm_b        ( pwm_b          ),
    .pwm_c        ( pwm_c          ),
    .en_idq       ( en_idq         ),
    .id           ( id             ),
    .iq           ( iq             ),
    .id_aim       ( id_aim         ),
    .iq_aim       ( iq_aim         ),
    .init_done    (                )
);



reg [23:0] cnt;
always @ (posedge clk or negedge rstn)
    if(~rstn)
        cnt <= 24'd0;
    else
        cnt <= cnt + 24'd1;


assign id_aim = $signed(16'd0);

always @ (posedge clk or negedge rstn)
    if(~rstn) begin
        iq_aim <= $signed(16'd0);
    end else begin
        if(cnt[23])
            iq_aim <=  $signed(16'd200);
        else
            iq_aim <= -$signed(16'd200);
    end


115200,8,n,1
uart_monitor #(
    .CLK_DIV      ( 16'd320        )
) u_uart_monitor (
    .rstn         ( rstn           ),
    .clk          ( clk            ),
    .i_en         ( en_idq         ),
    .i_val0       ( id             ),
    .i_val1       ( id_aim         ),
    .i_val2       ( iq             ),
    .i_val3       ( iq_aim         ),
    .o_uart_tx    ( uart_tx        )
);


endmodule
